{"name":"Validate.js","tagline":"A lightweight form validate script","body":"## 一个轻量级表单验证控件\r\n---\r\n\r\n\r\n这是一个轻量级表单验证脚本，所有的代码封装在一个类`FormValidate`中，使用时只要将下载后解压的js文件`validate.js`通`script`标签引入自己的页面，然后`new`操作创建一个该类的对象，并传入两个参数即可使表单实现输入验证的功能。\r\n### 示例代码\r\n\r\n\r\n```html\r\n<!--一、首先是表单的html结构-->\r\n<form id=\"myform\">\r\n\t<div>\r\n\t\t<input type=\"text\" name=\"username\" class=\"fv\"><span class=\"tips\"></span>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"email\" name=\"email\" class=\"fv\"><span class=\"tips\"></span>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"submit\" value=\"submit\">\r\n\t</div>\r\n</form>\r\n<!--二、引入js文件-->\r\n<script src=\"validate.js\"></script>\r\n\r\n<!--三、初始化-->\r\n<script>\r\n\tvar form = document.getElementById(\"myform\");\r\n\t\r\n\tvar config={\r\n\t\t\"username\":{},\r\n\t\t\"email\":{}\r\n\t};\r\n\t\r\n\tvar fv=new FormValidate(form,config);\r\n\t//这样页面中的表单就具有了输入验证的功能。\r\n</script>\r\n```\r\n\r\n\r\n\r\n\r\n### 特点\r\n1. 使用简单，只要创建一个`FormValidate`类的对象，并传入两个参数即可；\r\n3. 不直接改变元素的样式，而是根据验证的结果改变相关元素的类，这样用户可以更自由的定制表单样式；\r\n4. 提供大量默认配置，全部采用默认配置的话只要传入一个选定的表单元素即可实现功能（这个前提是用户的表单HTML结构严格遵守HTML结构要求）；\r\n5. 所有的默认配置都可以被覆盖，用户可以非常灵活的采用。如果不想采用默认配置，用户可以针对每个表单字段自定义验证规则以及验证通过或者不通过的提示信息；\r\n\r\n\r\n\r\n******\r\n\r\n### HTML结构要求\r\n\r\n```html\r\n<form id=\"myform\">\r\n\t<div>\r\n\t\t<input type=\"text\" name=\"username\" class=\"fv\">\r\n\t\t<span class=\"tips\"></span>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"email\" name=\"email\" class=\"fv\">\r\n\t\t<span class=\"tips\"></span>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"number\" name=\"phone\" class=\"fv\">\r\n\t\t<span class=\"tips\"></span>\r\n\t</div>\r\n\t<div>\r\n\t\t<input type=\"submit\"/>\r\n\t</div>\r\n</form>\r\n```\r\n1. 每一个需要验证的表单字段必须设置唯一的`name`属性和`class`属性，且`class`中必须包含`fv`（意思是`form validate`）;\r\n2. 每一个表单字段必须有一个相应的提示标签来显示验证通过或者不通过的信息，比如`span`，且其`class`属性需要包含`tips`；\r\n3. 每一个表单字段与相应的提示标签必须在同一个父元素内，每个这样的父元素中只能放一个表单字段及其提示标签，如上述示例中的`div`标签。\r\n\r\n---\r\n\r\n### 参数要求\r\n\r\n该脚本使用时只需要`new`操作创建一个`FormValidate`类型的对象即可，创建时，需要传入两个参数：`form`，`formconfig`；\r\n#### 参数一：`form`\r\n获取需要进行验证的表单，比如:\r\n\r\n```javascript\r\nvar form=document.getElementById(\"myform\");\r\n```\r\n\r\n\r\n#### 参数二：`formconfig`\r\n第二个参数是一个对象，用来配置的验证选项，以下面一个例子来说明\r\n\r\n```javascript\r\nvar formconfig={\r\n\t\"username\":{\t// 配置表单username字段的验证规则；\r\n\t\t\"reg\":/^\\w+$/,\t// 配置自定义的验证规则；\r\n\t\t\"fail\":\"用户名不符合规范。\",\t// 配置验证不通过时的提示内容；\r\n\t\t\"success\":\"<b>恭喜该用户名可用。</b>\",\t// 配置验证通过时的提示内容；\r\n\t\t\"empty\":\"用户名不能为空。\",\t// 配置表单字段为空时的提示内容\r\n\t\t\"fieldtype\":\"username\",\t// 如果没有配置`reg`选项，配置该选项可以指定脚本内置的验证规则；\r\n\t\t\"required\":true,\t// 配置该字段是否为必填项；\r\n\t},\r\n\t\"email\":{\t// 配置表单email字段的验证规则\r\n\t// 所有配置留空，采用默认配置；\r\n\t},\r\n\t\"phone\":{\r\n\t\t\"fail\":\"\",\r\n\t\t\"required\":true\r\n\t}\r\n};\r\n```\r\n\r\n这个配置对象可以用于前述html结构中的表单验证。\r\n如上所示，需要进行表单验证的每个字段，都需要(必须)在`formconfig`对象中设定对应的属性，且属性名与该字段的`name`特性值一致。(属性名对应的属性值是空对象也可以，总之必须指定；如果是空对象则对应的表单字段全部采用脚本自动选择的验证规则。)\r\n\r\n\r\n`formconfig`对象中每个属性名对应的值都是一个对象，这个对象可以设置如下属性：\r\n\r\n##### \"reg\"\r\n> `reg`接收一个正则表达式，可以自定义该字段的验证规则；当然，脚本内置了一些常用的验证规则，可以满足大部分常用需求，如果启用脚本内置的验证规则，不用设置该属性，在`fieldtype`属性中指定脚本内置的验证规则。\r\n\r\n\r\n\r\n##### \"fieldtype\"\r\n> `fieldtype`接收一个字符串，用于指定该字段的验证规则。脚本内置的验证规则列举如下，可以将`fieldtype`值指定为以下的任何一个。\r\n\r\n\t1. \"text\"，非空字符；\r\n\t2. \"email\"，邮件格式；\r\n\t3. \"phone\"，中国大陆地区的手机号；\r\n\t4. \"postcode\"，六位数邮政编码；\r\n\t5. \"number\"，任何有效数字（正、负树，0，小数）；\r\n\t6. \"url\"，超链接；\r\n\t7. \"username\"，注册用户名；\r\n\t8. \"password\"，一般密码规则，要求四位及以上非空字符串；\r\n\t9. \"strongpassword\"，更强壮的密码匹配，要求密码八位及以上且包含数字、字母及特殊字符。\r\n\t\r\n##### \"fail\"\r\n> `fail`接收一个字符串，指定验证不通过时的提示文字内容，可用html标签。如果不指定该属性，则采用默认的内容“field is not valid.”；\r\n\r\n##### \"success\"\r\n> `success`接收一个字符串，指定验证通过时的提示文字内容，可用html标签。如果不指定该属性，则采用默认的内容“field is OK.”；\r\n\r\n\r\n##### \"empty\"\r\n> `empty`接收一个字符串，指定当表单字段为空时的提示文字内容，可用html标签。如果不指定该属性，则采用默认的内容“field is required.”；\r\n\r\n##### \"required\"\r\n> `required`接收一个布尔值，指定该表单字段是否为必填项；也可以直接在标签行内指定表单字段的`required`特性。\r\n\r\n\r\n#### 验证规则的优先级\r\n1. 优先级最高的是用户为表单字段自定义的`reg`属性。\r\n2. 其次，如果用户没有指定某表单字段的`reg`属性，则根据用户提供`fieldtype`值采用脚本内置的常用验证规则。\r\n3. 最后，如果用户也没有指定`fieldtype`属性，则根据该表单字段的`type`特性自动选择最合适的验证规则。\r\n\r\n\r\n### 后续操作\r\n在传入参数创建了`FormValidate`对象后，传入的表单就可以实现验证的功能。\r\n比如\r\n\r\n```javascript\r\nvar fv=new FormValidate(form,formconfig);\r\nform.onsubmit=function(e){\r\n\talert(fv.result);\r\n\te.preventDefault();\r\n}\r\n```\r\n\r\n这之后，可以在任何时候访问`fv.result`属性（其值是`true`或者`false`）获取整个表单的验证结果，而且所有的表单字段值已经过滤了首位空字符。\r\n\r\n\r\n### UI样式设定\r\n该脚本不改变任何元素样式，只是根据不同的验证结果给相关元素设定不同的`class`值，你可以通过指定`class`的样式，来为表单建立不同外观。\r\n\r\n\r\n1. 某表单字段获得焦点：\r\n\t+ 该字段的HTML标签添加类`active`；\r\n\r\n\t\r\n2. 某表单字段失去焦点：\r\n\t+ 该字段的HTML标签删除类`active`；\r\n\t\r\n\t\r\n1. 某表单字段验证通过：\r\n\t+ 该表单字段添加`success`类；\r\n\t+ 该表单对应的提示标签添加`success`类；\r\n\t\r\n\t\r\n1. 某表单字段验证不通过：\r\n\t+ 该表单字段添加`fail`类；\r\n\t+ 该表单对应的提示标签添加`fail`类；\r\n\r\n\r\n1. 某表单字段为空：\r\n\t+ 该表单字段添加`empty`类；\r\n\t+ 该表单对应的提示标签添加`empty`类。\r\n\t\r\n\r\n\t\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}